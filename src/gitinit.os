// Вынесено отдельно, чтобы не включать зависимость от gitrunner

// Ожидает контекст:
//   * КаталогРепозитория
//   * Адрес
//   * Коммит
//   * ИмяНовойВетки

#Использовать gitrunner

Перем Гит;

Функция ВыделитьПодпуть(Знач ПолноеИмя, Знач Каталог)

	Подпуть = Сред(ПолноеИмя, СтрДлина(Каталог) + 1);
	Если Лев(Подпуть, 1) = "/"
		Или Лев(Подпуть, 1) = "\" Тогда

		Возврат Сред(Подпуть, 2);

	КонецЕсли;

	Возврат Подпуть;

КонецФункции

Процедура ВыполнитьКопированиеБезЗамены(Знач КаталогИсточник,
                                        Знач КаталогПриемник)

	Файлы = НайтиФайлы(КаталогИсточник, "*", Истина);
	Для Каждого мФайл Из Файлы Цикл

		// Вопрос со слэшами
		Подпуть = ВыделитьПодпуть(мФайл.ПолноеИмя, КаталогИсточник);
		ИмяЦелевогоФайла = ОбъединитьПути(КаталогПриемник, Подпуть);

		ЦелевойФайл = Новый Файл(ИмяЦелевогоФайла);
		Если ЦелевойФайл.Существует() Тогда
			Продолжить;
		КонецЕсли;

		Если мФайл.ЭтоКаталог() Тогда

			СоздатьКаталог(ЦелевойФайл.ПолноеИмя);

		Иначе

			КопироватьФайл(мФайл.ПолноеИмя, ЦелевойФайл.ПолноеИмя);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// НАДО: не забыть сделать толковый временный каталог
КаталогВременногоРепозитория = "/tmp/d-123";
СоздатьКаталог(КаталогВременногоРепозитория);

Гит = Новый ГитРепозиторий;
Гит.УстановитьРабочийКаталог(КаталогВременногоРепозитория);

ИмяРепозиторияПоставщика = "supplier";

Гит.Инициализировать();
Гит.ДобавитьВнешнийРепозиторий(ИмяРепозиторияПоставщика, Адрес);
Гит.Извлечь(ИмяРепозиторияПоставщика);

Если Не ЗначениеЗаполнено(ИмяНовойВетки) Тогда
	ИмяНовойВетки = СтрШаблон("feature/fix-of-%1", Лев(Коммит, 6));
КонецЕсли;

Гит.ПерейтиВВетку(Коммит);
Гит.ПерейтиВВетку(ИмяНовойВетки, Истина);

ВыполнитьКопированиеБезЗамены(КаталогВременногоРепозитория, КаталогРепозитория);

УдалитьФайлы(КаталогВременногоРепозитория);
