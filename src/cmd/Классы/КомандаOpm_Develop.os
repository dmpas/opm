#Использовать gitrunner
#Использовать tempfiles

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
	ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Инициализировать гит");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "ИмяНовойВетки", "Имя новой ветки в которую будут производиться изменения.");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие ключей командной строки и их значений
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт

	// Читаем метаданные
	Установщик = Новый УстановкаПакета;

	КаталогПоискаМетаданных = ТекущийКаталог();
	ИмяФайлаМетаданных = ОбъединитьПути(КаталогПоискаМетаданных, "opm-metadata.xml");
	Метаданные = Установщик.ПрочитатьМетаданныеПакета(ИмяФайлаМетаданных);

	мСвойства = Метаданные.Свойства();
	Если Не мСвойства.Свойство("АдресОсновногоХранилища")
		Или Не ЗначениеЗаполнено(мСвойства.АдресОсновногоХранилища) Тогда
		ВызватьИсключение "Нет данных поставщика";
	КонецЕсли;

	Если Не мСвойства.Свойство("ИдентификаторВерсии")
		Или Не ЗначениеЗаполнено(мСвойства.ИдентификаторВерсии) Тогда
		ВызватьИсключение "Нет данных поставщика";
	КонецЕсли;

	ИмяНовойВетки = ПараметрыКоманды["ИмяНовойВетки"];
	Если Не ЗначениеЗаполнено(ИмяНовойВетки) Тогда
		ИмяНовойВетки = СтрШаблон("feature/fix-of-%1", Лев(мСвойства.ИдентификаторВерсии, 6));
	КонецЕсли;

	ВыполнитьИнициализациюГитРепозитория(
		КаталогПоискаМетаданных,
		мСвойства.АдресОсновногоХранилища,
		мСвойства.ИдентификаторВерсии,
		ИмяНовойВетки);

	Возврат 0;

КонецФункции



Процедура ВыполнитьИнициализациюГитРепозитория(
		Знач КаталогРепозитория,
		Знач Адрес,
		Знач Коммит,
		Знач ИмяНовойВетки
	)

	Перем Гит;

	КаталогВременногоРепозитория = ВременныеФайлы.СоздатьКаталог();
	СоздатьКаталог(КаталогВременногоРепозитория);

	Гит = Новый ГитРепозиторий;
	Гит.УстановитьРабочийКаталог(КаталогВременногоРепозитория);

	ИмяРепозиторияПоставщика = "vendor";

	Гит.Инициализировать();
	Гит.ДобавитьВнешнийРепозиторий(ИмяРепозиторияПоставщика, Адрес);
	Гит.Извлечь(ИмяРепозиторияПоставщика);

	Если Не ЗначениеЗаполнено(ИмяНовойВетки) Тогда
		ИмяНовойВетки = СтрШаблон("feature/fix-of-%1", Лев(Коммит, 6));
	КонецЕсли;

	Гит.ПерейтиВВетку(Коммит);
	Гит.ПерейтиВВетку(ИмяНовойВетки, Истина);

	ВыполнитьКопированиеБезЗамены(КаталогВременногоРепозитория, КаталогРепозитория);

	УдалитьФайлы(КаталогВременногоРепозитория);

КонецПроцедуры


// Вспомогательные функции

Функция ВыделитьПодпуть(Знач ПолноеИмя, Знач Каталог)

	Подпуть = Сред(ПолноеИмя, СтрДлина(Каталог) + 1);
	Если Лев(Подпуть, 1) = "/"
		Или Лев(Подпуть, 1) = "\" Тогда

		Возврат Сред(Подпуть, 2);

	КонецЕсли;

	Возврат Подпуть;

КонецФункции

Процедура ВыполнитьКопированиеБезЗамены(Знач КаталогИсточник,
                                        Знач КаталогПриемник)

	Файлы = НайтиФайлы(КаталогИсточник, "*", Истина);
	Для Каждого мФайл Из Файлы Цикл

		// Вопрос со слэшами
		Подпуть = ВыделитьПодпуть(мФайл.ПолноеИмя, КаталогИсточник);
		ИмяЦелевогоФайла = ОбъединитьПути(КаталогПриемник, Подпуть);

		ЦелевойФайл = Новый Файл(ИмяЦелевогоФайла);
		Если ЦелевойФайл.Существует() Тогда
			Продолжить;
		КонецЕсли;

		Если мФайл.ЭтоКаталог() Тогда

			СоздатьКаталог(ЦелевойФайл.ПолноеИмя);

		Иначе

			КопироватьФайл(мФайл.ПолноеИмя, ЦелевойФайл.ПолноеИмя);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры
