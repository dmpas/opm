// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd
#Использовать asserts

#Использовать "../../src"

Перем БДД; //контекст фреймворка 1bdd

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯЧитаюНастройкиИзФайла");
	ВсеШаги.Добавить("ЗначениеНастройкиРавно");

	Возврат ВсеШаги;
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
	
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт
	
КонецПроцедуры

//я читаю настройки из файла "opm.cfg"
Процедура ЯЧитаюНастройкиИзФайла(Знач ПутьФайла) Экспорт
	Файл = Новый Файл(ОбъединитьПути(ТекущийКаталог(), ПутьФайла));
	// Ожидаем.Что(Файл.Существует(), СтрШаблон("Ожидали, что файл <%1> существует, а это не так!", Файл.ПолноеИмя)).ЭтоИстина();

	НастройкиПриложенияOpm.УстановитьФайлНастроек(Файл.ПолноеИмя);

	Настройки = НастройкиПриложенияOpm.Получить();
	БДД.СохранитьВКонтекст(КлючКонтекста(), Настройки);
КонецПроцедуры

//значение настройки "СоздаватьShСкриптЗапуска" равно "false"
Процедура ЗначениеНастройкиРавно(Знач КлючНастройки, Знач ЗначениеНастройки) Экспорт
	Настройки = БДД.ПолучитьИзКонтекста(КлючКонтекста());

	Ожидаем.Что(КлючНастройки, "Ключ настройки не заполнен").Заполнено();

	Значение = ЗначениеНастройки(Настройки, КлючНастройки);

	ЗначениеНастройки = КонвертироватьЗначениеПриНеобходимости(ЗначениеНастройки);

	Ожидаем.Что(Значение, СтрШаблон("Не совпадает значение настройки с именем <%1>", КлючНастройки)).Равно(ЗначениеНастройки);
КонецПроцедуры

// учитываются простые (СоздаватьShСкриптЗапуска) и иерархические ключи (Прокси.ИспользоватьПрокси)
Функция ЗначениеНастройки(Знач Настройки, Знач КлючНастройки)
	МассивИерархии = СтрРазделить(КлючНастройки, ".", Ложь);
	ПутьКлюча = "";
	ТекущиеНастройки = настройки;
	Для Счетчик = 0 По МассивИерархии.ВГраница() Цикл
		ТекущийКлюч = МассивИерархии[Счетчик];
		Если ПустаяСтрока(ПутьКлюча) Тогда
			ПутьКлюча  = ТекущийКлюч; 
		Иначе
			ПутьКлюча  = СтрШаблон("%1.%2", ПутьКлюча, ТекущийКлюч); 
		КонецЕсли;

		Значение = Неопределено;
		ЕстьНастройка = ТекущиеНастройки.Свойство(ТекущийКлюч, Значение);
		Ожидаем.Что(ЕстьНастройка, СтрШаблон("Не удалось получить настройку с именем <%1>", ПутьКлюча)).ЭтоИстина();
		ТекущиеНастройки = Значение;
	КонецЦикла;

	Возврат Значение;
КонецФункции

Функция КонвертироватьЗначениеПриНеобходимости(Знач ЗначениеНастройки)
	Если ТипЗнч(ЗначениеНастройки) = Тип("Строка") Тогда
		ЗначениеНастройки = НРег(ЗначениеНастройки);
		Если ЗначениеНастройки = "false" или ЗначениеНастройки = "ложь" Тогда
			ЗначениеНастройки = Ложь;
		ИначеЕсли ЗначениеНастройки = "true" или ЗначениеНастройки = "истина" Тогда
			ЗначениеНастройки = Истина;
		ИначеЕсли ЗначениеНастройки = "неопределено" Тогда
			ЗначениеНастройки = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Возврат ЗначениеНастройки;
КонецФункции

Функция КлючКонтекста()
	Возврат "ТестовыеНастройкиПриложенияОМП";
КонецФункции // КлючКонтекста()
